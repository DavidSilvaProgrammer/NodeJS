/*Crie um pequeno servidor web que contenha várias rotas.
Em cada rota, você deverá fazer o controle do fluxo de requisições de maneira estática ou dinâmica, 
alterne entre essas formas usando placeholders e query.

Trabalhe esse código em seu IDE, suba ele para sua conta no GitHub e compartilhe o link desse projeto 
no campo ao lado para que outros desenvolvedores possam analisá-lo.  */

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Esta é a Home Page');
});

app.get('/nome/:nome', (req, res) => {
  res.send(`Olá ${req.params.nome}!`);
});

app.get('/query', (req, res) => {
  const nome = req.query.nome;
  if (nome) {
    res.send(`Bem-vindo, ${nome}`);
  } else {
    res.send('Por favor, forneça um nome');
  }
});

app.get('/redireciona', (req, res) => {
  res.redirect('/');
});

app.listen(8080, () => {
  console.log('SERVIDOR RODANDO');
});


/*

Importei o framework Express e criei um objeto do aplicativo Express chamado "app". Em seguida, defini quatro rotas diferentes:

    A rota "/" retorna uma mensagem de boas-vindas.
    A rota "/nome/:nome" usa um placeholder para capturar um nome fornecido na URL e retorna uma mensagem personalizada.
    A rota "/query" usa uma query string para capturar um nome fornecido na URL e retorna uma mensagem personalizada.
    A rota "/redireciona" redireciona para a rota "/".

Observe que a rota "/nome/:nome" usa um placeholder (entre ":" e o nome do placeholder) para capturar um nome fornecido na URL. 
O Express converte automaticamente esse valor em uma string e passa como um argumento para a função de rota correspondente.

Já a rota "/query" usa o objeto req para acessar a query string da URL. Usando o método query, podemos extrair um valor especificado 
por um nome de chave (no caso, "nome"). Se nenhum valor for fornecido, a função retorna uma mensagem de erro.

Por fim, iniciamos o servidor Express ouvindo na porta 8080 e exibimos uma mensagem de console informando que o servidor está em execução.

*/

